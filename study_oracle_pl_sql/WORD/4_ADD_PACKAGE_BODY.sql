PROMPT --------------CREATE PACKAGE BODY--------------;
--CREATE PACKAGE BODY
CREATE OR REPLACE PACKAGE BODY PACKAGE_WORDS_LANGUAGES IS
  
  --PROCEDURE INSERT_LANGUAGE
  PROCEDURE INSERT_LANGUAGE(LANGUAGE_NAME_IN IN T_LANGUAGES.LANGUAGE_NAME%TYPE)
  AS
  BEGIN
    INSERT INTO T_LANGUAGES(LANGUAGE_NAME) VALUES(LANGUAGE_NAME_IN);
    COMMIT;
  END INSERT_LANGUAGE;
  
  --PROCEDURE UPDATE_LANGUAGE
  PROCEDURE UPDATE_LANGUAGE(LANGUAGE_NAME_IN IN T_LANGUAGES.LANGUAGE_NAME%TYPE, LANGUAGE_ID_IN IN T_LANGUAGES.LANGUAGE_ID%TYPE)
  AS
  BEGIN
    UPDATE T_LANGUAGES SET LANGUAGE_NAME = LANGUAGE_NAME_IN WHERE LANGUAGE_ID = LANGUAGE_ID_IN;
    COMMIT;
  END UPDATE_LANGUAGE;
  
  --PROCEDURE DELETE_LANGUAGE
  PROCEDURE DELETE_LANGUAGE(LANGUAGE_NAME_IN IN T_LANGUAGES.LANGUAGE_NAME%TYPE, LANGUAGE_ID_IN IN T_LANGUAGES.LANGUAGE_ID%TYPE,
                            DELETE_AUDIT_TABLE_IN IN INTEGER DEFAULT 1)
  AS
  BEGIN
    IF DELETE_AUDIT_TABLE_IN = 1 THEN
      IF LANGUAGE_NAME_IN IS NOT NULL THEN
        DELETE FROM AUDIT_LANGUAGES WHERE LANGUAGE_ID = (SELECT L.LANGUAGE_ID FROM T_LANGUAGES L WHERE L.LANGUAGE_NAME = LANGUAGE_NAME_IN);
      ELSIF LANGUAGE_ID_IN IS NOT NULL THEN
        DELETE FROM AUDIT_LANGUAGES WHERE LANGUAGE_ID = LANGUAGE_ID_IN;
      END IF;
    END IF;
    
    IF LANGUAGE_NAME_IN IS NOT NULL THEN
      DELETE FROM T_LANGUAGES WHERE LANGUAGE_NAME = LANGUAGE_NAME_IN;
    ELSIF LANGUAGE_ID_IN IS NOT NULL THEN
      DELETE FROM T_LANGUAGES WHERE LANGUAGE_ID = LANGUAGE_ID_IN;
    END IF;
    
    
    COMMIT;
  END DELETE_LANGUAGE;
  
  PROCEDURE SELECT_LANGUAGE_BY_ID(LANGUAGE_ID_IN IN T_LANGUAGES.LANGUAGE_ID%TYPE, LANGUAGE_NAME_OUT OUT T_LANGUAGES.LANGUAGE_NAME%TYPE)
  AS
  BEGIN
    SELECT L.LANGUAGE_NAME INTO LANGUAGE_NAME_OUT
    FROM V_LANGUAGES L
    WHERE L.LANGUAGE_ID = LANGUAGE_ID_IN;
  END SELECT_LANGUAGE_BY_ID;
  
  PROCEDURE SELECT_LANGUAGE_BY_NAME(LANGUAGE_NAME_IN IN T_LANGUAGES.LANGUAGE_NAME%TYPE, LANGUAGE_ID_OUT OUT T_LANGUAGES.LANGUAGE_ID%TYPE)
  AS
  BEGIN
    SELECT L.LANGUAGE_ID INTO LANGUAGE_ID_OUT
    FROM V_LANGUAGES L
    WHERE L.LANGUAGE_NAME = LANGUAGE_NAME_IN;
  EXCEPTION
    WHEN NO_DATA_FOUND THEN
      LANGUAGE_ID_OUT := NULL;
  END SELECT_LANGUAGE_BY_NAME;
  
  --PROCEDURE DELETE_ALL_LANGUAGE
  PROCEDURE DELETE_ALL_LANGUAGE(DELETE_AUDIT_TABLE_IN IN INTEGER DEFAULT 1)
  AS
  BEGIN
    IF DELETE_AUDIT_TABLE_IN = 1 THEN
      DELETE FROM AUDIT_LANGUAGES;
      COMMIT;
    END IF;
    DELETE FROM T_LANGUAGES;
    COMMIT;
  END DELETE_ALL_LANGUAGE;
  
--GET_ALL_LANGUAGE
  PROCEDURE GET_ALL_LANGUAGE(SYS_REFCURSOR_OUT OUT SYS_REFCURSOR)
  AS  
  BEGIN
    OPEN SYS_REFCURSOR_OUT FOR
      SELECT * FROM T_LANGUAGES ORDER BY LANGUAGE_ID;
  END GET_ALL_LANGUAGE;
  
  --PROCEDURE TRUNCATE_LANGUAGE
  PROCEDURE TRUNCATE_LANGUAGE 
  AS
  BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE T_LANGUAGES';
  END TRUNCATE_LANGUAGE;
END PACKAGE_WORDS_LANGUAGES;
/
SHOW ERRORS;

-------------------------------------------------------

CREATE OR REPLACE PACKAGE BODY PACKAGE_WORDS_PART_OF_SPEECHES IS
  
  --PROCEDURE INSERT_PART_OF_SPEECH
  PROCEDURE INSERT_PART_OF_SPEECH(PART_OF_SPEECH_IN IN T_PART_OF_SPEECHES.PART_OF_SPEECH%TYPE)
  AS
  BEGIN
    INSERT INTO T_PART_OF_SPEECHES(PART_OF_SPEECH) VALUES(PART_OF_SPEECH_IN);
    COMMIT;
  END INSERT_PART_OF_SPEECH;
  
  --PROCEDURE UPDATE_PART_OF_SPEECH
  PROCEDURE UPDATE_PART_OF_SPEECH(PART_OF_SPEECH_IN IN T_PART_OF_SPEECHES.PART_OF_SPEECH%TYPE, PART_OF_SPEECH_ID_IN IN T_PART_OF_SPEECHES.PART_OF_SPEECH_ID%TYPE)
  AS
  BEGIN
    UPDATE T_PART_OF_SPEECHES SET PART_OF_SPEECH = PART_OF_SPEECH_IN WHERE PART_OF_SPEECH_ID = PART_OF_SPEECH_ID_IN;
    COMMIT;
  END UPDATE_PART_OF_SPEECH;
  
  --PROCEDURE DELETE_PART_OF_SPEECH
  PROCEDURE DELETE_PART_OF_SPEECH(PART_OF_SPEECH_IN IN T_PART_OF_SPEECHES.PART_OF_SPEECH%TYPE,
                                  PART_OF_SPEECH_ID_IN IN T_PART_OF_SPEECHES.PART_OF_SPEECH_ID%TYPE,
                                  DELETE_AUDIT_TABLE_IN IN INTEGER DEFAULT 1)
  AS
  BEGIN
    IF DELETE_AUDIT_TABLE_IN = 1 THEN
      IF PART_OF_SPEECH_ID_IN IS NOT NULL THEN
        DELETE FROM AUDIT_PART_OF_SPEECHES WHERE PART_OF_SPEECH_ID = PART_OF_SPEECH_ID_IN;
      ELSIF PART_OF_SPEECH_IN IS NOT NULL THEN
        DELETE FROM AUDIT_PART_OF_SPEECHES WHERE PART_OF_SPEECH_ID = (SELECT POS.PART_OF_SPEECH_ID FROM T_PART_OF_SPEECHES POS WHERE POS.PART_OF_SPEECH = PART_OF_SPEECH_IN);
      END IF;
    END IF;
  
    IF PART_OF_SPEECH_ID_IN IS NOT NULL THEN
      DELETE FROM T_PART_OF_SPEECHES WHERE PART_OF_SPEECH_ID = PART_OF_SPEECH_ID_IN;
    ELSIF PART_OF_SPEECH_IN IS NOT NULL THEN
      DELETE FROM T_PART_OF_SPEECHES WHERE PART_OF_SPEECH = PART_OF_SPEECH_IN;
    END IF;
    COMMIT;
  END DELETE_PART_OF_SPEECH;
  
  --PROCEDURE SELECT_PART_OF_SPEECH_BY_ID
  PROCEDURE SELECT_PART_OF_SPEECH_BY_ID(PART_OF_SPEECH_ID_IN IN T_PART_OF_SPEECHES.PART_OF_SPEECH_ID%TYPE, PART_OF_SPEECH_OUT OUT T_PART_OF_SPEECHES.PART_OF_SPEECH%TYPE)
  AS
  BEGIN
    SELECT POS.PART_OF_SPEECH INTO PART_OF_SPEECH_OUT
    FROM T_PART_OF_SPEECHES POS
    WHERE POS.PART_OF_SPEECH_ID = PART_OF_SPEECH_ID_IN;
  END SELECT_PART_OF_SPEECH_BY_ID;
  
  --PROCEDURE SELECT_PART_OF_SPEECH_BY_NAME
  PROCEDURE SELECT_PART_OF_SPEECH_BY_NAME(PART_OF_SPEECH_IN IN T_PART_OF_SPEECHES.PART_OF_SPEECH%TYPE, PART_OF_SPEECH_ID_OUT OUT T_PART_OF_SPEECHES.PART_OF_SPEECH_ID%TYPE)
  AS
  BEGIN
    SELECT POS.PART_OF_SPEECH_ID INTO PART_OF_SPEECH_ID_OUT
    FROM T_PART_OF_SPEECHES POS
    WHERE POS.PART_OF_SPEECH = PART_OF_SPEECH_IN;  
  END SELECT_PART_OF_SPEECH_BY_NAME;
  
  --PROCEDURE DELETE_ALL_PART_OF_SPEECH
  PROCEDURE DELETE_ALL_PART_OF_SPEECH(DELETE_AUDIT_TABLE_IN IN INTEGER DEFAULT 1)
  AS
  BEGIN
    IF DELETE_AUDIT_TABLE_IN = 1 THEN
      DELETE FROM AUDIT_PART_OF_SPEECHES;
    END IF;
    DELETE FROM T_PART_OF_SPEECHES;
    COMMIT;
  END DELETE_ALL_PART_OF_SPEECH;
  
  PROCEDURE GET_ALL_LANGUAGE(SYS_REFCURSOR_OUT OUT SYS_REFCURSOR)
  AS
  BEGIN
    OPEN SYS_REFCURSOR_OUT FOR
      SELECT * FROM T_PART_OF_SPEECHES ORDER BY PART_OF_SPEECH_ID;
  END;
  
  --PROCEDURE TRUNCATE_PART_OF_SPEECH
  PROCEDURE TRUNCATE_PART_OF_SPEECH 
  AS
  BEGIN
    EXECUTE IMMEDIATE 'TRUNCATE TABLE T_PART_OF_SPEECHES';
  END TRUNCATE_PART_OF_SPEECH;
END PACKAGE_WORDS_PART_OF_SPEECHES;
/
SHOW ERRORS;

-------------------------------------------------------

CREATE OR REPLACE PACKAGE BODY PACKAGE_WORDS_WORDS IS
  
  --PROCEDURE INSERT_WORD  
  PROCEDURE INSERT_WORD(WORD_IN IN T_WORDS.WORD%TYPE,
                        LANGUAGE_ID_IN IN T_WORDS.LANGUAGE_ID%TYPE,
                        PART_OF_SPEECH_ID_IN IN T_WORDS.PART_OF_SPEECH_ID%TYPE)
  AS
  BEGIN
    INSERT INTO T_WORDS(WORD, LANGUAGE_ID, PART_OF_SPEECH_ID) VALUES(WORD_IN, LANGUAGE_ID_IN, PART_OF_SPEECH_ID_IN);
    COMMIT;
  END INSERT_WORD;
  
--PROCEDURE UPDATE_WORD
  PROCEDURE UPDATE_WORD(WORD_ID_IN IN T_WORDS.WORD_ID%TYPE,
                        WORD_IN IN T_WORDS.WORD%TYPE,
                        LANGUAGE_ID_IN IN T_WORDS.LANGUAGE_ID%TYPE,
                        PART_OF_SPEECH_ID_IN IN T_WORDS.PART_OF_SPEECH_ID%TYPE)
  AS
    L_WORD T_WORDS%ROWTYPE;
  BEGIN
    SELECT_WORD_BY_ID(WORD_ID_IN, L_WORD);
    
    IF WORD_IN IS NULL THEN
      WORD_IN := L_WORD.WORD;
    END IF;
    IF LANGUAGE_ID_IN IS NULL THEN
      LANGUAGE_ID_IN := L_WORD.LANGUAGE_ID;
    END IF;
    IF PART_OF_SPEECH_ID_IN IS NULL THEN
      PART_OF_SPEECH_ID_IN := L_WORD.PART_OF_SPEECH_ID;
    END IF;
    
    UPDATE T_WORDS SET WORD = WORD_IN, LANGUAGE_ID = LANGUAGE_ID_IN, 
                        PART_OF_SPEECH_ID = PART_OF_SPEECH_ID_IN
    WHERE WORD_ID = WORD_ID_IN;
  END UPDATE_WORD;
  
--PROCEDURE DELETE_WORD
  PROCEDURE DELETE_WORD(WORD_ID_IN IN T_WORDS.WORD_ID%TYPE,
                        WORD_IN IN T_WORDS.WORD%TYPE,
                        DELETE_AUDIT_TABLE_IN IN INTEGER DEFAULT 1)
  AS
  BEGIN
    IF DELETE_AUDIT_TABLE_IN = 1 THEN
      IF WORD_ID_IN IS NOT NULL THEN
        DELETE FROM AUDIT_WORDS WHERE WORD_ID = WORD_ID_IN;
      ELSE
        DELETE FROM AUDIT_WORDS WHERE WORD_ID = (SELECT WORD_ID FROM T_WORDS WHERE WORD = WORD_IN);
      END IF;
    END IF;
    
    IF WORD_ID_IN IS NOT NULL THEN
      DELETE FROM T_WORDS WHERE WORD_ID = WORD_ID_IN;
    ELSE
      DELETE FROM T_WORDS WHERE WORD = WORD_IN;
    END IF;
      
    COMMIT;
  END DELETE_WORD;
  
--PROCEDURE SELECT_WORD_BY_ID
  PROCEDURE SELECT_WORD_BY_ID(WORD_ID_IN IN T_WORDS.WORD_ID%TYPE,
                              WORD_OUT OUT T_WORDS%ROWTYPE)
  AS
  BEGIN
    SELECT * INTO WORD_OUT
    FROM T_WORDS
    WHERE WORD_ID = WORD_ID_IN;
  END SELECT_WORD_BY_ID;
  
--PROCEDURE SELECT_WORD_BY_WORD
  PROCEDURE SELECT_WORD_BY_WORD(WORD_IN IN T_WORDS.WORD%TYPE,
                                WORD_OUT OUT T_WORDS%ROWTYPE)
  AS
  BEGIN 
    SELECT * INTO WORD_OUT
    FROM T_WORDS
    WHERE WORD = WORD_IN;
  END SELECT_WORD_BY_WORD;
  
--PROCEDURE DELETE_ALL_WORD
  PROCEDURE DELETE_ALL_WORD(DELETE_AUDIT_TABLE_IN IN INTEGER DEFAULT 1)
  AS
  BEGIN
    IF DELETE_AUDIT_TABLE_IN = 1 THEN
      DELETE FROM AUDIT_WORDS;
    END IF;
    
    DELETE FROM T_WORDS;
    COMMIT;
  END DELETE_ALL_WORD;
  
--PROCEDURE GET_ALL_WORDS
  PROCEDURE GET_ALL_WORDS(SYS_REFCURSOR_OUT OUT SYS_REFCURSOR)
  AS
  BEGIN
    OPEN SYS_REFCURSOR_OUT FOR
      SELECT * FROM T_WORDS ORDER BY WORD_ID;
  END GET_ALL_WORDS;
END PACKAGE_WORDS_WORDS;
/

SHOW ERRORS;