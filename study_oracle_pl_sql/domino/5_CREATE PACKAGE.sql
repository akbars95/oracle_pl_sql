DROP PACKAGE PKG_DOMINOS_USERS;
DROP PACKAGE PKG_DOMINOS_ACCOUNTS;
/

--------------------------------------------------------------------------------------COMMON PACKAGE
CREATE OR REPLACE PACKAGE PKG_COMMON AS
  
  --FUNCTIONS
  FUNCTION GET_RANDOM_WITH_LIMIT(LIMIT_NUM_IN IN INTEGER)
  RETURN INTEGER;
  
END PKG_COMMON;
/

CREATE OR REPLACE PACKAGE BODY PKG_COMMON AS
  
  --FUNCTIONS
  FUNCTION GET_RANDOM_WITH_LIMIT(LIMIT_NUM_IN IN INTEGER)
  RETURN INTEGER
  IS
    NUMBER_RANDOM INTEGER;
  BEGIN
    SELECT ROUND(SYS.DBMS_RANDOM.VALUE * LIMIT_NUM_IN) INTO NUMBER_RANDOM FROM DUAL;
    RETURN NUMBER_RANDOM;
  END GET_RANDOM_WITH_LIMIT;
  
END PKG_COMMON;
/

--------------------------------------------------------------------------------------DOMINOS PACKAGE
CREATE OR REPLACE PACKAGE PKG_DOMINOS_DOMINOS AS
  
  --FUNCTIONS
  FUNCTION GET_DOMINO_COUNT
  RETURN INTEGER;
  
  FUNCTION GET_RANDOM_DOMINO
  RETURN T_DOMINOS%ROWTYPE;
  
  FUNCTION GET_RANDOM_DOMINO_ID
  RETURN T_DOMINOS.DOMINO_ID%TYPE;
  
END PKG_DOMINOS_DOMINOS;
/

CREATE OR REPLACE PACKAGE BODY PKG_DOMINOS_DOMINOS AS

  --FUNCTIONS
  FUNCTION GET_DOMINO_COUNT
  RETURN INTEGER
  IS
    RESULT_RETURN INTEGER;
  BEGIN
    SELECT COUNT(*) INTO RESULT_RETURN FROM MV_DOMINOS;
    RETURN RESULT_RETURN;
  END GET_DOMINO_COUNT;
  
  FUNCTION GET_RANDOM_DOMINO
  RETURN T_DOMINOS%ROWTYPE
  IS
    CURRENT_DOMINO T_DOMINOS%ROWTYPE;
  BEGIN
    --SELECT ROUND(SYS.DBMS_RANDOM.VALUE * GET_DOMINO_COUNT) INTO CUR_RANDOM FROM DUAL;
    SELECT MVD.* INTO CURRENT_DOMINO 
    FROM MV_DOMINOS MVD
    WHERE MVD.DOMINO_ID = (
      SELECT ROUND(SYS.DBMS_RANDOM.VALUE * GET_DOMINO_COUNT) AS NUMBER_RANDOM FROM DUAL
    );
    
    RETURN CURRENT_DOMINO;
  END GET_RANDOM_DOMINO;
  
  FUNCTION GET_RANDOM_DOMINO_ID
  RETURN T_DOMINOS.DOMINO_ID%TYPE
  IS
    DOMINO T_DOMINOS%ROWTYPE;
  BEGIN
    DOMINO := GET_RANDOM_DOMINO;
    RETURN DOMINO.DOMINO_ID;
  END GET_RANDOM_DOMINO_ID;

END PKG_DOMINOS_DOMINOS;
/

--------------------------------------------------------------------------------------USERS PACKAGE
CREATE OR REPLACE PACKAGE PKG_DOMINOS_USERS AS
  
  --PROCEDURES
  PROCEDURE INSERT_USER(USER_FIRST_NAME_IN IN T_USERS.USER_FIRST_NAME%TYPE, 
                        USER_LAST_NAME_IN IN T_USERS.USER_LAST_NAME%TYPE, 
                        USER_MIDDLE_NAME_IN IN T_USERS.USER_MIDDLE_NAME%TYPE DEFAULT NULL, 
                        USER_DATE_OF_BIRTH_IN IN T_USERS.USER_DATE_OF_BIRTH%TYPE, 
                        USER_GENDER_IN IN T_USERS.USER_GENDER%TYPE,
                        USER_EMAIL_IN IN T_USERS.USER_EMAIL%TYPE,
                        IS_COMMIT_IN IN BOOLEAN DEFAULT TRUE);
  
  PROCEDURE DELETE_ALL_USERS;
  
  --FUNCTIONS
  FUNCTION GET_USER_BY_USER_EMAIL(USER_EMAIL_IN IN T_USERS.USER_EMAIL%TYPE)
  RETURN T_USERS.USER_ID%TYPE;
                        
END PKG_DOMINOS_USERS;
/

CREATE OR REPLACE PACKAGE BODY PKG_DOMINOS_USERS AS
  
  --PROCEDURES
  PROCEDURE INSERT_USER(USER_FIRST_NAME_IN IN T_USERS.USER_FIRST_NAME%TYPE, 
                        USER_LAST_NAME_IN IN T_USERS.USER_LAST_NAME%TYPE, 
                        USER_MIDDLE_NAME_IN IN T_USERS.USER_MIDDLE_NAME%TYPE DEFAULT NULL, 
                        USER_DATE_OF_BIRTH_IN IN T_USERS.USER_DATE_OF_BIRTH%TYPE, 
                        USER_GENDER_IN IN T_USERS.USER_GENDER%TYPE,
                        USER_EMAIL_IN IN T_USERS.USER_EMAIL%TYPE,
                        IS_COMMIT_IN IN BOOLEAN DEFAULT TRUE)
  IS
  BEGIN
    INSERT INTO T_USERS(USER_FIRST_NAME, USER_LAST_NAME, USER_MIDDLE_NAME, USER_DATE_OF_BIRTH, USER_GENDER, USER_EMAIL)
    VALUES(USER_FIRST_NAME_IN, USER_LAST_NAME_IN, USER_MIDDLE_NAME_IN, USER_DATE_OF_BIRTH_IN, USER_GENDER_IN, USER_EMAIL_IN);
    IF IS_COMMIT_IN THEN
      COMMIT;
    END IF;  
  END INSERT_USER;
  
  PROCEDURE DELETE_ALL_USERS 
  IS
  BEGIN
    DELETE FROM T_USERS;
  END DELETE_ALL_USERS;
  
  --FUNCTIONS
  FUNCTION GET_USER_BY_USER_EMAIL(USER_EMAIL_IN IN T_USERS.USER_EMAIL%TYPE)
  RETURN T_USERS.USER_ID%TYPE
  IS
    L_RETURN_RESULT T_USERS.USER_ID%TYPE;
  BEGIN
    SELECT U.USER_ID INTO L_RETURN_RESULT
    FROM T_USERS U
    WHERE USER_EMAIL_IN IS NOT NULL AND U.USER_EMAIL = USER_EMAIL_IN;
    RETURN L_RETURN_RESULT;
  END GET_USER_BY_USER_EMAIL;
END PKG_DOMINOS_USERS;
/

--------------------------------------------------------------------------------------ACCOUNTS PACKAGE
CREATE OR REPLACE PACKAGE PKG_DOMINOS_ACCOUNTS AS

  --PROCEDURES
  PROCEDURE INSERT_ACCOUNT(ACCOUNT_USER_ID_IN IN T_ACCOUNTS.ACCOUNT_USER_ID%TYPE, 
                        ACCOUNT_USERNAME_IN IN T_ACCOUNTS.ACCOUNT_USERNAME%TYPE, 
                        ACCOUNT_PASSWORD_IN IN T_ACCOUNTS.ACCOUNT_PASSWORD%TYPE DEFAULT NULL,
                        IS_COMMIT_IN IN BOOLEAN DEFAULT TRUE);
                        
  PROCEDURE DELETE_ALL_ACCOUNTS;
                        
END PKG_DOMINOS_ACCOUNTS;
/

CREATE OR REPLACE PACKAGE BODY PKG_DOMINOS_ACCOUNTS AS
  
  --PROCEDURES
  PROCEDURE INSERT_ACCOUNT(ACCOUNT_USER_ID_IN IN T_ACCOUNTS.ACCOUNT_USER_ID%TYPE, 
                        ACCOUNT_USERNAME_IN IN T_ACCOUNTS.ACCOUNT_USERNAME%TYPE, 
                        ACCOUNT_PASSWORD_IN IN T_ACCOUNTS.ACCOUNT_PASSWORD%TYPE DEFAULT NULL,
                        IS_COMMIT_IN IN BOOLEAN DEFAULT TRUE)
  IS
  BEGIN
    INSERT INTO T_ACCOUNTS(ACCOUNT_USER_ID, ACCOUNT_USERNAME, ACCOUNT_PASSWORD)
    VALUES(ACCOUNT_USER_ID_IN, ACCOUNT_USERNAME_IN, ACCOUNT_PASSWORD_IN);
    IF IS_COMMIT_IN THEN
      COMMIT;
    END IF;  
  END INSERT_ACCOUNT;
  
  PROCEDURE DELETE_ALL_ACCOUNTS
  IS
  BEGIN
    DELETE FROM T_ACCOUNTS;
  END DELETE_ALL_ACCOUNTS;
  
END PKG_DOMINOS_ACCOUNTS;
/

--------------------------------------------------------------------------------------GAMES PACKAGE
CREATE OR REPLACE PACKAGE PKG_DOMINOS_GAMES AS

  --PROCEDURES
  PROCEDURE INSERT_GAME(GAME_NAME_IN IN T_GAMES.GAME_NAME%TYPE, 
                        CREATED_BY_USER_ID_IN IN T_GAMES.CREATED_BY_USER_ID%TYPE, 
                        CREATED_TIMESTAMP_IN IN T_GAMES.CREATED_TIMESTAMP%TYPE DEFAULT NULL,
                        START_TIMESTAMP_IN IN T_GAMES.START_TIMESTAMP%TYPE DEFAULT NULL,
                        END_TIMESTAMP_IN IN T_GAMES.END_TIMESTAMP%TYPE DEFAULT NULL,
                        IS_COMMIT_IN IN BOOLEAN DEFAULT TRUE);
                        
  PROCEDURE DELETE_ALL_GAMES;
  
  --FUNCTIONS
  FUNCTION GET_GAME_BY_GAME_NAME(GAME_NAME_IN IN T_GAMES.GAME_NAME%TYPE)
  RETURN T_GAMES.GAME_ID%TYPE;
                        
END PKG_DOMINOS_GAMES;
/

CREATE OR REPLACE PACKAGE BODY PKG_DOMINOS_GAMES AS

  --PROCEDURES
  PROCEDURE INSERT_GAME(GAME_NAME_IN IN T_GAMES.GAME_NAME%TYPE, 
                        CREATED_BY_USER_ID_IN IN T_GAMES.CREATED_BY_USER_ID%TYPE, 
                        CREATED_TIMESTAMP_IN IN T_GAMES.CREATED_TIMESTAMP%TYPE DEFAULT NULL,
                        START_TIMESTAMP_IN IN T_GAMES.START_TIMESTAMP%TYPE DEFAULT NULL,
                        END_TIMESTAMP_IN IN T_GAMES.END_TIMESTAMP%TYPE DEFAULT NULL,
                        IS_COMMIT_IN IN BOOLEAN DEFAULT TRUE)
  IS
  BEGIN
    INSERT INTO T_GAMES(GAME_NAME, CREATED_BY_USER_ID, CREATED_TIMESTAMP, START_TIMESTAMP, END_TIMESTAMP)
    VALUES(GAME_NAME_IN, CREATED_BY_USER_ID_IN, CREATED_TIMESTAMP_IN, START_TIMESTAMP_IN, END_TIMESTAMP_IN);
    IF IS_COMMIT_IN THEN
      COMMIT;
    END IF;  
  END INSERT_GAME;
  
  PROCEDURE DELETE_ALL_GAMES
  IS
  BEGIN
    DELETE FROM T_GAMES;
  END DELETE_ALL_GAMES;
  
   --FUNCTIONS
  FUNCTION GET_GAME_BY_GAME_NAME(GAME_NAME_IN IN T_GAMES.GAME_NAME%TYPE)
  RETURN T_GAMES.GAME_ID%TYPE
  IS
    RESULT_RETURN T_GAMES.GAME_ID%TYPE;
  BEGIN
    SELECT G.GAME_ID INTO RESULT_RETURN
    FROM T_GAMES G
    WHERE G.GAME_NAME = GAME_NAME_IN;
    RETURN RESULT_RETURN;
  END GET_GAME_BY_GAME_NAME;
  
END PKG_DOMINOS_GAMES;
/

--------------------------------------------------------------------------------------GAMES_ATTENDEES PACKAGE
CREATE OR REPLACE PACKAGE PKG_DOMINOS_GAMES_ATTENDEES AS

  --PROCEDURES
  PROCEDURE INSERT_GAMES_ATTENDEES(GAME_ID_IN IN T_GAMES_ATTENDEES.GAME_ID%TYPE, 
                        USER_ID_IN IN T_GAMES_ATTENDEES.USER_ID%TYPE,
                        IS_COMMIT_IN IN BOOLEAN DEFAULT TRUE);
                        
  PROCEDURE DELETE_ALL_GAMES_ATTENDEES;
  
  --FUNCTIONS
  FUNCTION GET_G_A_BY_G_NAME_AND_U_NAME(GAME_ID_IN IN T_GAMES_ATTENDEES.GAME_ID%TYPE, 
                        USER_ID_IN IN T_GAMES_ATTENDEES.USER_ID%TYPE)
  RETURN T_GAMES_ATTENDEES.GAME_ATTENDEE_ID%TYPE;
                        
END PKG_DOMINOS_GAMES_ATTENDEES;
/

CREATE OR REPLACE PACKAGE BODY PKG_DOMINOS_GAMES_ATTENDEES AS

  --PROCEDURES
  PROCEDURE INSERT_GAMES_ATTENDEES(GAME_ID_IN IN T_GAMES_ATTENDEES.GAME_ID%TYPE, 
                        USER_ID_IN IN T_GAMES_ATTENDEES.USER_ID%TYPE,
                        IS_COMMIT_IN IN BOOLEAN DEFAULT TRUE)
  IS
  BEGIN
    INSERT INTO T_GAMES_ATTENDEES(GAME_ID, USER_ID)
    VALUES(GAME_ID_IN, USER_ID_IN);
    IF IS_COMMIT_IN THEN
      COMMIT;
    END IF;  
  END INSERT_GAMES_ATTENDEES;
  
  PROCEDURE DELETE_ALL_GAMES_ATTENDEES
  IS
  BEGIN
    DELETE FROM T_GAMES_ATTENDEES;
  END DELETE_ALL_GAMES_ATTENDEES;
  
  --FUNCTIONS
  FUNCTION GET_G_A_BY_G_NAME_AND_U_NAME(GAME_ID_IN IN T_GAMES_ATTENDEES.GAME_ID%TYPE, 
                        USER_ID_IN IN T_GAMES_ATTENDEES.USER_ID%TYPE)
  RETURN T_GAMES_ATTENDEES.GAME_ATTENDEE_ID%TYPE
  IS
    RESULT_RETURN T_GAMES_ATTENDEES.GAME_ATTENDEE_ID%TYPE;
  BEGIN
    SELECT GA.GAME_ATTENDEE_ID INTO RESULT_RETURN
    FROM T_GAMES_ATTENDEES GA
    WHERE GA.GAME_ID = GAME_ID_IN AND GA.USER_ID = USER_ID_IN;
    RETURN RESULT_RETURN;
  END GET_G_A_BY_G_NAME_AND_U_NAME;
  
END PKG_DOMINOS_GAMES_ATTENDEES;
/
SHOW ERRORS;

--------------------------------------------------------------------------------------GAME_USER_DOMINOS PACKAGE
CREATE OR REPLACE PACKAGE PKG_DOMINOS_GAME_USER_DOMINOS AS

  --PROCEDURES
  PROCEDURE INSERT_GAME_USER_DOMINOS(GAME_ATTENDEE_ID_IN IN T_GAME_USER_DOMINOS.GAME_ATTENDEE_ID%TYPE, 
                        DOMINO_ID_IN IN T_GAME_USER_DOMINOS.DOMINO_ID%TYPE,
                        IS_COMMIT_IN IN BOOLEAN DEFAULT TRUE);
                        
  PROCEDURE INSERT_GAME_USER_DOMINOS(GAME_ATTENDEE_ID_IN IN T_GAME_USER_DOMINOS.GAME_ATTENDEE_ID%TYPE,
                        IS_COMMIT_IN IN BOOLEAN DEFAULT TRUE);
                        
  PROCEDURE DELETE_ALL_GAME_USER_DOMINOS;
                        
END PKG_DOMINOS_GAME_USER_DOMINOS;
/

CREATE OR REPLACE PACKAGE BODY PKG_DOMINOS_GAME_USER_DOMINOS AS

  --PROCEDURES
  PROCEDURE INSERT_GAME_USER_DOMINOS(GAME_ATTENDEE_ID_IN IN T_GAME_USER_DOMINOS.GAME_ATTENDEE_ID%TYPE, 
                        DOMINO_ID_IN IN T_GAME_USER_DOMINOS.DOMINO_ID%TYPE,
                        IS_COMMIT_IN IN BOOLEAN DEFAULT TRUE)
  IS
  BEGIN
    INSERT INTO T_GAME_USER_DOMINOS(GAME_ATTENDEE_ID, DOMINO_ID)
    VALUES(GAME_ATTENDEE_ID_IN, DOMINO_ID_IN);
    IF IS_COMMIT_IN THEN
      COMMIT;
    END IF;  
  END INSERT_GAME_USER_DOMINOS;
  
  PROCEDURE INSERT_GAME_USER_DOMINOS(GAME_ATTENDEE_ID_IN IN T_GAME_USER_DOMINOS.GAME_ATTENDEE_ID%TYPE,
                        IS_COMMIT_IN IN BOOLEAN DEFAULT TRUE)
  IS
    L_DOMINO_ID T_GAME_USER_DOMINOS.DOMINO_ID%TYPE;
--    L_FLAG_EXISTS BOOLEAN := FALSE;
    L_FLAG_FOUND BOOLEAN := FALSE;
    REMAIN_DOMINO_COUNT NUMBER := 0;
    LOOP_VAR NUMBER := 1;
  BEGIN
  
  --------------------------------------
      
  SELECT COUNT(*) INTO REMAIN_DOMINO_COUNT
    FROM (SELECT MVD.DOMINO_ID AS COUNT_REMAIN_DOMINO
                  FROM MV_DOMINOS MVD
                  MINUS
                  SELECT GUDOUT.DOMINO_ID
                  FROM T_GAME_USER_DOMINOS GUDOUT
                  WHERE GUDOUT.GAME_ATTENDEE_ID IN (
                    SELECT OUTGA.GAME_ATTENDEE_ID
                    FROM T_GAMES_ATTENDEES OUTGA
                    WHERE OUTGA.GAME_ID = (
                      select DISTINCT GA.GAME_ID
                      from T_GAME_USER_DOMINOS GUD INNER JOIN T_GAMES_ATTENDEES GA ON GUD.GAME_ATTENDEE_ID = GA.GAME_ATTENDEE_ID 
                      WHERE GA.GAME_ATTENDEE_ID = GAME_ATTENDEE_ID_IN
                    )
                  ) 
                  )RESULT_TABLE;
      
      DBMS_OUTPUT.put_line('REMAIN_DOMINO_COUNT = ' || REMAIN_DOMINO_COUNT);
      REMAIN_DOMINO_COUNT := PKG_COMMON.GET_RANDOM_WITH_LIMIT(REMAIN_DOMINO_COUNT);
      DBMS_OUTPUT.put_line('--REMAIN_DOMINO_COUNT = ' || REMAIN_DOMINO_COUNT);
      FOR CUR IN (SELECT MVD.DOMINO_ID
                  FROM MV_DOMINOS MVD
                  MINUS
                  SELECT GUDOUT.DOMINO_ID
                  FROM T_GAME_USER_DOMINOS GUDOUT
                  WHERE GUDOUT.GAME_ATTENDEE_ID IN (
                    SELECT OUTGA.GAME_ATTENDEE_ID
                    FROM T_GAMES_ATTENDEES OUTGA
                    WHERE OUTGA.GAME_ID = (
                      select DISTINCT GA.GAME_ID
                      from T_GAME_USER_DOMINOS GUD INNER JOIN T_GAMES_ATTENDEES GA ON GUD.GAME_ATTENDEE_ID = GA.GAME_ATTENDEE_ID 
                      WHERE GA.GAME_ATTENDEE_ID = GAME_ATTENDEE_ID_IN
                    )
                  )
      )
      LOOP
        --DBMS_OUTPUT.PUT_LINE('CUR.DOMINO_ID = ' || CUR.DOMINO_ID);
        IF REMAIN_DOMINO_COUNT = 1 THEN
          L_DOMINO_ID := CUR.DOMINO_ID;
        END IF;
        IF L_FLAG_FOUND = FALSE THEN
          IF LOOP_VAR = REMAIN_DOMINO_COUNT THEN
            L_FLAG_FOUND := TRUE;
            L_DOMINO_ID := CUR.DOMINO_ID;
          END IF;
        END IF;
        LOOP_VAR := LOOP_VAR + 1;
      END LOOP;
    
    DBMS_OUTPUT.PUT_LINE('L_DOMINO_ID = ' || L_DOMINO_ID);
    INSERT_GAME_USER_DOMINOS(GAME_ATTENDEE_ID_IN, L_DOMINO_ID);
DBMS_OUTPUT.put_line('*************************');
  
-----------------------
--    LOOP
--      L_DOMINO_ID := PKG_DOMINOS_DOMINOS.GET_RANDOM_DOMINO_ID;
--      
--      FOR CUR IN (SELECT MVD.DOMINO_ID
--                  FROM MV_DOMINOS MVD
--                  MINUS
--                  SELECT GUDOUT.DOMINO_ID
--                  FROM T_GAME_USER_DOMINOS GUDOUT
--                  WHERE GUDOUT.GAME_ATTENDEE_ID IN (
--                    SELECT OUTGA.GAME_ATTENDEE_ID
--                    FROM T_GAMES_ATTENDEES OUTGA
--                    WHERE OUTGA.GAME_ID = (
--                      select DISTINCT GA.GAME_ID
--                      from T_GAME_USER_DOMINOS GUD INNER JOIN T_GAMES_ATTENDEES GA ON GUD.GAME_ATTENDEE_ID = GA.GAME_ATTENDEE_ID 
--                      WHERE GA.GAME_ATTENDEE_ID = GAME_ATTENDEE_ID_IN
--                    )
--                  )
--      )
--      LOOP
--        IF L_FLAG_EXISTS = FALSE THEN
--          IF CUR.DOMINO_ID = L_DOMINO_ID THEN
--            L_FLAG_EXISTS := TRUE;
--          END IF;
--        END IF;
--      END LOOP;
--    EXIT WHEN L_FLAG_EXISTS = TRUE;  
--    END LOOP;
--    
--    DBMS_OUTPUT.PUT_LINE('L_DOMINO_ID = ' || L_DOMINO_ID);
--    INSERT_GAME_USER_DOMINOS(GAME_ATTENDEE_ID_IN, L_DOMINO_ID);
  END INSERT_GAME_USER_DOMINOS;
  
  PROCEDURE DELETE_ALL_GAME_USER_DOMINOS
  IS
  BEGIN
    DELETE FROM T_GAME_USER_DOMINOS;
  END DELETE_ALL_GAME_USER_DOMINOS;
  
END PKG_DOMINOS_GAME_USER_DOMINOS;
/
SHOW ERRORS;